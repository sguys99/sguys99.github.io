<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://sguys99.github.io//tag/it-tips/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://sguys99.github.io//" rel="alternate" type="text/html" />
  <updated>2022-07-03T09:37:55+00:00</updated>
  <id>https://sguys99.github.io//tag/it-tips/feed.xml</id>

  
  
  

  
    <title type="html">Happy Plant | </title>
  

  
    <subtitle>Data science, Machine learning, and Automatic control</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">docker로 gpu기반 딥러닝 개발환경 구축하기</title>
      <link href="https://sguys99.github.io//it08" rel="alternate" type="text/html" title="docker로 gpu기반 딥러닝 개발환경 구축하기" />
      <published>2022-07-01T15:00:00+00:00</published>
      <updated>2022-07-01T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it08</id>
      <content type="html" xml:base="https://sguys99.github.io//it08">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it06&quot;&gt;(1)WSL2 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it07&quot;&gt;(2)ubuntu 환경에서 docker 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it08&quot;&gt;(3)docker로 gpu기반 딥러닝 개발환경 구축하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;딥러닝 개발 환경을 구축하는 작업은 번거롭다. 프로젝트 별로 모델 개발 또는 구동 환경이 다를 수 있는데, 이 때마다 설정을 반복해야 한다. 물론 가상 환경을 사용하면 단일 서버에 여러 개의 개발 환경을 관리할 수 있다. 그러나 매번 환경 설정을 해야하는 불편함은 그대로다. 누군가 잘 만들어둔 환경 세팅을 가져와서 쓸 수 있다면, 시간을 단축 시킬 수 있을 것이다. 그리고 또 한가지. 여러 사람이 협업을 하는 프로젝트의 경우, 각자 개발 환경 통일이 되지 않는 다면 시행착오를 겪을 것이다. 구성원 간 개발 환경을 통일하는 작업 또한 골칫거리다. 한가지 더 예를 들어보자. 하나의 GPU 서버 자원을 여러 사람이 함께 사용해야하는 상황을 생각해보자. 누군가는 텐서플로를 사용하고, 다른 사람은 파이토치를 사용할 수도 있다. 사용하는 프레임워크의 버전, 라이브러리의 종류도 제각각이다. 각자 자신의 입맛에 맞는 가상환경을 설정하다보면 서버 시스템 환경이 지저분해질 수 있다.&lt;/p&gt;

&lt;p&gt;도커를 사용하면 딥러닝 모델 개발 환경을 구축하는 것부터, 협업 환경을 통일하는 일까지 간편하게 마무리할 수 있다. 그리고 라이브러리들이 컨테이터 안에서 동작하기 때문에 서버 설정을 최소화 할 수 있다. 따라서 서버 자원에 손대는 작업을 최소화 할 수 있다. 마지막으로 한가지 변수만 남았다. 도커 컨테이터 안에서 gpu 자원에 접근 가능할까.&lt;/p&gt;

&lt;p&gt;본 포스트에서는 도커를 사용해서 gpu 기반 딥러닝 프레임워크 개발환경을 구축하는 방법에 대해서 설명한다. Ubuntu 20.04, 엔비티어 RTX 3080 gpu 환경을 기준으로 설명한다. 하지만 WSL2 환경에서도 동일한 방법으로 환경구축이 가능하다. 도커는 이미 설치되어 있다고 가정하고 설명을 진행한다. 도커 및 WSL2 설정에 대한 설명은 다음 포스트를 참고하기 바란다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sguys99.github.io/it06&quot;&gt;WSL2 와 docker for windows 설치&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sguys99.github.io/it07&quot;&gt;ubuntu 환경에서 docker 설치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-nvidia-드라이버-설치&quot;&gt;1. nvidia 드라이버 설치&lt;/h3&gt;
&lt;p&gt;그래픽카드 드라이버 설치가 되어있지 않다면 설치를 진행한다. 서버에 장착된 그래픽카드에 설치가능한 드라이버 버전을 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ubuntu-drivers devices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 화면 상에서 권장하는 드라이버는 nvidia-driver-470이다.&lt;/p&gt;

&lt;p&gt;드라이버를 설치하는 방법은 두가지다. (자동/ 수동)&lt;/p&gt;

&lt;p&gt;방법1) 권장 드라이버를 자동설치 하려면 다음과 같이 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ubuntu-drivers autoinstall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;방법2) 원하는 버전을 수동으로 설치하려면 직접 드라이버 버전을 명시하면 된다.&lt;br /&gt;
예를 들어 nvidia-driver-470을 설치하고 싶다면 다음과 같이 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install nvidia-driver-470
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서는 자동 설치로 진행했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 완료 후 시스템을 재부팅 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 제대로 되었는지 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt --installed list | grep nvidia-driver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;nvidia-driver-470이 설치되었다.&lt;/p&gt;

&lt;p&gt;마지막으로 nvidia-smi 명령으로 gpu의 상태도 확인해본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nvidia-smi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-도커-설치생략&quot;&gt;2. 도커 설치(생략)&lt;/h3&gt;

&lt;p&gt;만약 도커가 설치되어 있지 않다면, 이전 포스트를 참고하여 설치를 완료한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sguys99.github.io/it07&quot;&gt;ubuntu 환경에서 docker 설치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-엔비디아-도커2-설치&quot;&gt;3. 엔비디아 도커2 설치&lt;/h3&gt;

&lt;p&gt;엔비디아 도커(nvidia docker)의 정식 명칭은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NVIDIA Container Toolkit&lt;/code&gt;으로, 컨테이너 환경에서 gpu 자원을 가동할 수 있도록 돕는 툴킷이다. 이 툴킷을 사용하면 도커 컨테이너 환경에서 nvidia CUDA runtime을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런데 도커 최신 버전(Docker-ce 19.03 이후 버전)에서는 nvidia CUDA runtime을 사용할 수 있도록 공식적으로 지원하고 있다. 다시 말해 엔비디아 도커 설치 필요 없이 컨테이너 내부에서 gpu를 구동할 수 있다. 하지만 docker에서 gpu를 사용하기 위한 명령어와 nvidia docker를 통해 gpu를 사용하기 위한 명령어는 약간의 차이가 있다. 엔비디아 도커를 추가로 설치한다고 문제가 되지는 않는다. 여기서는 엔비디아 도커2 버전을 설치해보도록 한다.&lt;/p&gt;

&lt;p&gt;설치 전에 GPG 키를 추가하고 엔비디아 도커 원격저장소를 바라보도록 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치된 패키지 리스트를 업데이트 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;엔비디아 도커를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install -y nvidia-docker2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커를 재시작한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;정상적으로 설지되었는지 확인하기 위해 컨테이너 안에서 nvidia-smi 명령을 실행해본다. 앞에서도 언급한 바와 같이 네이티브 도커(Docker-ce 19.03 이후 버전) 명령으로 실행하는 방법과 엔비디아 도커를 사용하는 명령에 차이가 있다. 예를 들어 CUDA10.1 버전을 사용한 컨테이너를 생성하고 nvidia-smi 명령을 실행하기 위한 방법들은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방법1 : 네이티브 도커 사용
    &lt;ul&gt;
      &lt;li&gt;docker run -it –gpus –rm nvidia/cuda:10.1-base nvidia-smi&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;방법2 : 엔비디아 도커 사용
    &lt;ul&gt;
      &lt;li&gt;docker run –runtime=nvidia -it –rm nvidia/cuda:10.1-base nvidia-smi&lt;/li&gt;
      &lt;li&gt;nvidia-docker run -it –rm nvidia/cuda:10.1-base nvidia-smi&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네이티브 도커를 사용할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--gpus&lt;/code&gt; 옵션을 사용하면 되고, 엔비디아 도커를 사용할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--runtime=nvidia&lt;/code&gt; 옵션으로 지정하거나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvidia-docker&lt;/code&gt; 명령으로 gpu 사용을 명시하면 된다.&lt;/p&gt;

&lt;p&gt;위 세가지 중 한 가지를 입력해보자. 로컬 서버에 &lt;strong&gt;nvidia/cuda:10.1-base&lt;/strong&gt; 도커 이미지가 없다면 원격으로 이미지를 가져온 후, 컨테이너를 생성하고 nvidia-smi 명령을 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.08.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-컨테이너에서-딥러닝-프레임워크pytorch-구동하기&quot;&gt;4. 컨테이너에서 딥러닝 프레임워크(pytorch) 구동하기&lt;/h3&gt;

&lt;p&gt;마지막으로 CUDA runtime이 탑재된 컨테이너에서 파이토치(pytorch)를 구동해보자.&lt;/p&gt;

&lt;p&gt;미리 만들어진 이미지를 다운 받기 위해 웹브라우저로 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;도커 허브(Docker Hub)&lt;/a&gt;에 접속한다. 도커 허브는 도커 이미지를 저장하고 공유할 수 있도록 돕는 서비스이다. 만약 계정이 없다면 가입하고 로그인한다.&lt;/p&gt;

&lt;p&gt;검색창에 pytorch/pytorch를 입력해서 파이토치 공식 저장소에 접근한다. 그리고 Tags를 클릭하면 다양한 버전, 다양한 CUDA runtime을 탑재한 이미지들을 확인할 수 있다. 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.7.1-cuda11.0-cudnn8-runtime&lt;/code&gt;이미지를 가져오도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.09.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;터미널에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker pull&lt;/code&gt; 명령으로 이미지를 로컬 서버로 가져온다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker pull pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker images&lt;/code&gt; 명령으로 저장된 이미지 리스트를 확인해본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.10.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CUDA runtime을 사용한 도커 컨테이너를 구동한다. 그리고 python을 실행하고, 파이토치를 import하여 gpu 사용이 가능한지 확인해본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방법1 : 네이티브 도커 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it --gpus all pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.11.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방법 2-1 : 엔비디아 도커 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --runtime=nvidia -it all pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.12.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;방법 2-2 : 엔비디아 도커 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nvidia-docker run -it all pytorch/pytorch:1.7.1-cuda11.0-cudnn8-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-07-01-it08/it08.13.jpg&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. (1)WSL2 설치하기 (2)ubuntu 환경에서 docker 설치하기 (3)docker로 gpu기반 딥러닝 개발환경 구축하기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">ubuntu 환경에서 docker 설치하기</title>
      <link href="https://sguys99.github.io//it07" rel="alternate" type="text/html" title="ubuntu 환경에서 docker 설치하기" />
      <published>2022-06-25T15:00:00+00:00</published>
      <updated>2022-06-25T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it07</id>
      <content type="html" xml:base="https://sguys99.github.io//it07">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it06&quot;&gt;(1)WSL2 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it07&quot;&gt;(2)ubuntu 환경에서 docker 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it08&quot;&gt;(3)docker로 gpu기반 딥러닝 개발환경 구축하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;도커(docker)는 리눅스 환경에서 동작하는 응용 프로그램들을 컨테이너(container)라고 하는 독립적인 실행환경에서 운영하도록 돕는 오픈소스 프로젝트이다. 과거에 VMware나 VirtualBox와 같이 호스트 OS위에 가상화 소프트웨어를 설치하여 OS를 구동하는 방식이 존재했다. 이에 비해 도커는 호스트 OS 위에 추가적으로 OS를 설치하지 않기 때문에 설치 용량이 적고 실행속도도 빠르다.&lt;/p&gt;

&lt;p&gt;도커는 일반적으로 서버환경 구축, 운영을 위해 널리 사용된다. 이외에 다수의 딥러닝 엔지니어들이 GPU 자원을 함께 사용해야 하는 환경에서 도커 이미지로 개별 개발 환경을 구축하는데 사용할 수 있다. 이렇게 하면 GPU OS의 기본 설정 변경을 최소화 하면서, 각자가 선호하는 모델 개발 환경을 만들어서 작업을 진행할 수 있다.  본 포스트는 도커를 사용한 딥러닝 개발환경 구축을 염두해두고, 도커를 설치하는 방법에 대해서 설명한다.&lt;/p&gt;

&lt;p&gt;Ubuntu 20.04를 기준으로 설치 방법을 설명한다. WSL2나 windos OS 상에서 도커를 설치하는 방법에 대해서는 &lt;a href=&quot;https://sguys99.github.io/it06&quot;&gt;&lt;strong&gt;WSL2 설치하기&lt;/strong&gt;&lt;/a&gt; 포스트를 참고한다.&lt;/p&gt;

&lt;h3 id=&quot;1-구버전-삭제-및-사전-설정&quot;&gt;1. 구버전 삭제 및 사전 설정&lt;/h3&gt;
&lt;p&gt;이미 구버전이 설치되어 있다면, 삭제한다. 그리고 패키지를 업데이트 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt-get remove docker docker-engine docker.io containerd runc
$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커를 설치하는데 필요한 &lt;strong&gt;필수 패키지&lt;/strong&gt;를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;도커의 GPG 키를 추가한다. 리눅스의 패키지 관리 툴이 도커 엔진 설치 전에 패키지가 유효한지 확인하기 위해 검증을 하는데 이때 GPG키가 필요하다. 따라서 curl로 GPG 키를 다운 받아 apt 키 리스트에 추가해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;패키지 관리 시스템이 안정된 버전의 도커 설치 파일이 있는 저장소를 바라보도록 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-도커엔진-설치&quot;&gt;2. 도커엔진 설치&lt;/h3&gt;

&lt;p&gt;패키지 업데이트 후, 도커 엔진 최신 버전을 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이로써 기본적인 도커 설치가 완료되었다.&lt;/p&gt;

&lt;h3 id=&quot;3-기본-사용자-권한-설정&quot;&gt;3. 기본 사용자 권한 설정&lt;/h3&gt;

&lt;p&gt;정상적으로 설치되었는지 확인하기 위해, 간단한 도커 명령어를 입력해보자. 가동 중인 컨테이너 리스트를 출력해주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 명령을 입력해본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컨테이너 리스트가 출력되지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permission denied&lt;/code&gt; 메시지가 출력된다. 도커는 기본적으로 root 권한으로만 명령어 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;매번 도커 명령 앞에 sudo를 입력하면 번거롭다. root 권한이 아닌 호스트의 기본 유저에게도 사용 권한을 주도록 설정한다. 그리고 도커를 재시작(restart) 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo usermod -a -G docker $USER
$ sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 OS를 재시작한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;재부팅을 한 후, 터미널을 실행해서 동작중인 컨테이너 리스트를 출력해본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-06-25-it07/it07.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컨테이너 생성을 하지 않았기 때문에 어떤 컨테이너도 표시되지 않는다. 하지만 앞에서와는 달리 빈 리스트 정보가 표시된다. 도커가 정상적으로 설치된 것이다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. (1)WSL2 설치하기 (2)ubuntu 환경에서 docker 설치하기 (3)docker로 gpu기반 딥러닝 개발환경 구축하기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">WSL2 설치하기</title>
      <link href="https://sguys99.github.io//it06" rel="alternate" type="text/html" title="WSL2 설치하기" />
      <published>2022-05-28T15:00:00+00:00</published>
      <updated>2022-05-28T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it06</id>
      <content type="html" xml:base="https://sguys99.github.io//it06">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it06&quot;&gt;(1)WSL2 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it07&quot;&gt;(2)ubuntu 환경에서 docker 설치하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it08&quot;&gt;(3)docker로 gpu기반 딥러닝 개발환경 구축하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows Subsystem for Linux(WSL)는 Windows 환경에서 가상머신이나 듀얼부팅 설정 없이 Linux를 사용할 수 있도록 돕는 소프트웨어이다. 여기서는 WSL2 기반 환경에서, Ubuntu 22.04를 설치/사용하는 방법에 대해서 설명한다.&lt;/p&gt;

&lt;h3 id=&quot;1-windows-버전-확인&quot;&gt;1. Windows 버전 확인&lt;/h3&gt;
&lt;p&gt;WSL2는 Windows 10 빌드 19041 이상, 또는 Windows 11 이상에서 동작한다. 만약 Windows 10을 사용하고 있다면 작업 표시줄 검색창에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PC 정보&lt;/code&gt;를 입력해서 사용하는 OS 빌드 정보를 확인해본다. 버전이 낮다면 OS 업데이트를 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-windows-terminal-설치-선택사항&quot;&gt;2. Windows Terminal 설치 (선택사항)&lt;/h3&gt;

&lt;p&gt;WSL2 설치는 터미널을 통해 진행한다. 기본으로 설치되어 있는 PowerShell도 사용할 수 있지만, 사용에 장점이 많은 Windows Terminal 설치를 추천한다. Windows Terminal은 작업 표시줄 검색으로 Microsoft Store에 접속하여 Windows Terminal을 검색하여 다운, 설치할 수 있다. 또는 다음 &lt;a href=&quot;https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=ko-KR&amp;amp;gl=KR&quot;&gt;[링크]&lt;/a&gt;에 접속하여 다운받는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 완료된 후, 다시 작업 표시줄 검색에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;터미널&lt;/code&gt;을 입력하면 Windows Terminal 프로그램을 실행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-wsl2-셋업하기&quot;&gt;3. WSL2 셋업하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;먼저 Windows Terminal을 &lt;strong&gt;관리자 권한&lt;/strong&gt;으로 실행한다. 그리고 WSL2를 셋업하기 위해 다음 두 명령어를 차례대로 입력한다. WSL과 가상환경 옵션을 활성화 해주는 명령이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&amp;gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;활성화가 끝나면 &lt;strong&gt;Windows를 재시작&lt;/strong&gt; 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux커널 업데이트 패키지를 다운, 설치한다. &lt;a href=&quot;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&quot;&gt;여기&lt;/a&gt;에 접속하여 x64용 msi 파일을 다운로드한다. 다운받은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl_update_x64.msi&lt;/code&gt;파일을 실행하여 설치를 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WSL이 정상적으로 설정되었는지 확인한다. Windows Terminal에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl&lt;/code&gt;을 입력했을 때 다음과 같은 메시지가 실행되면 제대로 설정된 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계속해서 WSL2를 기본버전으로 설정해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-linux-배포-버전-설치&quot;&gt;4. Linux 배포 버전 설치&lt;/h3&gt;

&lt;p&gt;이제 WSL2에서 구동되는 Linux 배포 버전을 설치한다. 여기서는 Ubuntu 22.04를 기준으로 설명한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Microsoft Store에서 Ubuntu 22.04를 검색해서 다운로드 버튼을 클릭한다. 다운이 완료되면 열기를 클릭한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.08.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;언어나 사용자/ 패스워드 설정을 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.09.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Terminal을 실행하면 Ubuntu 22.04 터미널 항목이 추가되었다. 선택하면 우분투 터미널을 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.10.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참-고--wsl2-ubuntu-환경에서-docker-사용하기&quot;&gt;참 고 : WSL2 Ubuntu 환경에서 Docker 사용하기&lt;/h3&gt;

&lt;p&gt;WSL2하의 Ubuntu에서 Docker를 사용하기 위해서는 Windows용 Docker를 설치해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker 공식 사이트의 &lt;a href=&quot;https://docs.docker.com/desktop/windows/install/&quot;&gt;Windows 버전 설치 페이지&lt;/a&gt;로 이동한다. 그리고 &lt;strong&gt;Docker Desktop for Windows&lt;/strong&gt; 버튼을 클릭해서 설치파일을 다운 받는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.11.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다운 받은 설치 파일을 실행해서 설치를 진행한다.  Use WSL2… 항목이 체크된 것을 확인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.12.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치가 완료되면 Windows를 재시작한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Terminal에서 Ubuntu를 실행한다. 터미널에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;를 입력해서 결과가 다음과 같으면 정상적으로 설치된 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-05-28-it06/it06.13.jpg&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. (1)WSL2 설치하기 (2)ubuntu 환경에서 docker 설치하기 (3)docker로 gpu기반 딥러닝 개발환경 구축하기</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">오프라인 환경에 파이썬 개발환경 구축하기</title>
      <link href="https://sguys99.github.io//it05" rel="alternate" type="text/html" title="오프라인 환경에 파이썬 개발환경 구축하기" />
      <published>2022-01-05T15:00:00+00:00</published>
      <updated>2022-01-05T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it05</id>
      <content type="html" xml:base="https://sguys99.github.io//it05">&lt;p&gt;기업에서의 SW 개발환경은 보안 등의 이슈로 인해 인터넷으로부터 단절되어 있는 경우가 있다. 인터넷이 되더라도 특정 사이트가 방화벽으로 차단되어 있어 pip나 conda install이 원활하지 못할 수도 있다. 본 포스트에서는 오프라인 개발 환경에서 파이썬 개발환경을 구축하는 방법에 대해서 소개한다.&lt;/p&gt;

&lt;p&gt;윈도우OS, Minicona를 환경을 기준으로 설명한다.&lt;/p&gt;

&lt;p&gt;준비사항은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷이 연결된 PC : 설치파일 및 파이썬 패키지 다운로드용, pip 인스톨러가 설치되어있다고 가정&lt;/li&gt;
  &lt;li&gt;오프라인 PC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;인터넷이 연결된 PC에서 설치파일과 패키지를 다운로드 받고, 이 것들을 오프라인 PC(개발환경)에 복사하여 설치를 진행하는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-01-05-it05/it05.00-1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-miniconda-다운로드-및-설치&quot;&gt;1. Miniconda 다운로드 및 설치&lt;/h3&gt;
&lt;p&gt;Anaconda는 데이터분석 패키지 관리와 사용을 용이하게 하는 어플리케이션이다. 개인이나 학생 등의 연구자는 Individual Edition을 사용하면 된다. Anaconda로 150여개의 패키지들이 함께 설치되므로 편리하다.&lt;br /&gt;
2020년 하반기 유료버전(Commercial edition)에 대한 기준이 새롭게 설정되었다. 즉 200명 이상의 종업원을 보유한 기업이나 영리기관은 유료버전을 사용해야 한다.&lt;a href=&quot;https://www.anaconda.com/blog/anaconda-commercial-edition-faq&quot;&gt;[참고]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-01-05-it05/it05.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-01-05-it05/it05.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;유료버전을 사용하기 곤란한 상황이라면 대안이 있다. 바로 Miniconda를 사용하는 것이다. Minicona는 Anaconda의 minimal 버전으로 무료이다. 파이썬과 패키지 관리자 프로그램이 기본 제공된다. 다만 데이터 분석에 사용되는 패키지들은 포함되어 있지 않으므로 직접 설치해야한다. 회사에서 무료버전을 사용해야하거나 Anaconda에서 제공되는 라이브러리 전체를 사용하지 않아서 가벼운 환경을 원한다면 Miniconda가 대안이 될 수 있다.&lt;/p&gt;

&lt;p&gt;이제 설치를 위해 공식문서 url에 접속한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서는 윈도우 OS를 기준으로 설명한다. 사용자의 OS, 파이썬 버전에 맞는 인스톨러를 다운로드 받는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2022-01-05-it05/it05.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 파일을 오프라인 PC에 복사해서 설치한다.
&lt;img src=&quot;assets/images/2022-01-05-it05/it05.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;윈도우 OS의 시작버튼을 클릭해서 Anaconda Prompt가 설치되어 있으면 정상 설치된 것이다.&lt;/p&gt;

&lt;h3 id=&quot;2-파이썬-패키지-다운로드-받기&quot;&gt;2. 파이썬 패키지 다운로드 받기&lt;/h3&gt;
&lt;p&gt;이제 오프라인 pc에 설치할 패키지를 다운도르 받을 차례다.&lt;br /&gt;
인터넷이 연결된 pc에서 패키지 다운로드 명령은 다음과 같은 형태이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pip download 패키지명==버전번호&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예를 들어 numpy 1.19.5를 다운로드 받고 싶다면 다음과 같이 입력하면 된다. 버전번호를 입력하지 않으면 최신 버전이 저장된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip download numpy==1.19.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 패키지들을 저장할 폴더를 생성하고 진입하자. (여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&lt;/code&gt;라는 이름의 폴더를 생성하였다.)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;pkg
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pkg
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;kg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 앞에서 설명한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip download&lt;/code&gt; 명령을 사용해서 사용할 패키지들 다운로드 받는다. 패키지 사용에 필요한 dependency도 함께 저장된다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;base&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; C:&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;kg&amp;gt;pip download &lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.19.5
Collecting &lt;span class=&quot;nv&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.19.5
  Using cached numpy-1.19.5-cp38-cp38-win_amd64.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;13.3 MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Saved c:&lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;kg&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;umpy-1.19.5-cp38-cp38-win_amd64.whl
Successfully downloaded numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;패키지를 다운로드 하면서 폴더안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;파일을 생성하여 저장한 패키지명과 정보를 기록한다.
다음과 같은 형태로 기록하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;numpy==1.19.5
pandas==1.2.4
matplotlib==3.3.4
lightgbm==3.2.1
scikit-learn==0.24.1
seaborn==0.11.1
joblib==1.0.1
jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;필요한 설치가 완료되면 폴더안에 requirements.txt 파일과 whl 확장자 파일이 저장되어 있을 것이다.
&lt;img src=&quot;assets/images/2022-01-05-it05/it05.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참 고 : 기존 환경에 설치된 패키지리스트를 다운로드 받고 싶다면?&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt; 명령은 현재 (가상)환경에 설치된 전체 패키지를 출력한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(base) C:\&amp;gt;pip freeze
absl-py==0.14.1
alabaster @ file:///home/ktietz/src/ci/alabaster_1611921544520/work
anaconda-client==1.7.2
anaconda-navigator==2.0.3
anaconda-project @ file:///tmp/build/80754af9/anaconda-project_1610472525955/work
anyio @ file:///C:/ci/anyio_1620153418380/work/dist
appdirs==1.4.4
argh==0.26.2

---(생 략)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;패키지 리스트를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; 파일에 출력하고 싶다면 다음과 같이 입력한다.
(파일에 기록할 때는 Anaconda prompt를 관린자 권한으로 실행해야 한다.)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(base) C:\pkg&amp;gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이파일에 기록된 패키지를 다운로드 하는 명령은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(base) C:\pkg&amp;gt;pip download -r requirements.txt
Collecting numpy==1.19.5
  Downloading numpy-1.19.5-cp39-cp39-win_amd64.whl (13.3 MB)
     |████████████████████████████████| 13.3 MB 6.4 MB/s
Collecting pandas==1.2.4
  Downloading pandas-1.2.4-cp39-cp39-win_amd64.whl (9.3 MB)
     |████████████████████████████████| 9.3 MB ...
Collecting matplotlib==3.3.4
  Downloading matplotlib-3.3.4-cp39-cp39-win_amd64.whl (8.5 MB)
     |████████████████████████████████| 8.5 MB 6.4 MB/s

---(생 략)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-다운로드-받은-패키지-설치하기&quot;&gt;3. 다운로드 받은 패키지 설치하기&lt;/h3&gt;
&lt;p&gt;앞에서 다운로드 받은 패키지 폴더 전체를 오프라인 pc에 복사한다.&lt;br /&gt;
Miniconda의 Anaconda prompt를 실행한다.&lt;br /&gt;
폴더 안으로 이동하여 오프라인 패키지를 설치하는 명령을 다음과 같이 입력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(base) C:\pkg&amp;gt; pip install --no-index --find-links=&quot;./&quot; -r requirements.txt
Looking in links: ./
Processing c:\pkg\numpy-1.19.5-cp39-cp39-win_amd64.whl
Processing c:\pkg\pandas-1.2.4-cp39-cp39-win_amd64.whl
Processing c:\pkg\matplotlib-3.3.4-cp39-cp39-win_amd64.whl
Processing c:\pkg\lightgbm-3.2.1-py3-none-win_amd64.whl
Processing c:\pkg\scikit_learn-0.24.1-cp39-cp39-win_amd64.whl

---(생 략)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되었다. 설치 후에는 패키지 폴더를 삭제해도 된다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">기업에서의 SW 개발환경은 보안 등의 이슈로 인해 인터넷으로부터 단절되어 있는 경우가 있다. 인터넷이 되더라도 특정 사이트가 방화벽으로 차단되어 있어 pip나 conda install이 원활하지 못할 수도 있다. 본 포스트에서는 오프라인 개발 환경에서 파이썬 개발환경을 구축하는 방법에 대해서 소개한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">jekyll 블로그에 utterance로 댓글기능 적용하기</title>
      <link href="https://sguys99.github.io//it04" rel="alternate" type="text/html" title="jekyll 블로그에 utterance로 댓글기능 적용하기" />
      <published>2021-12-30T15:00:00+00:00</published>
      <updated>2021-12-30T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it04</id>
      <content type="html" xml:base="https://sguys99.github.io//it04">&lt;p&gt;jekyll 블로그에서는 댓글 기능을 제공하지 않는다. 따라서 별도로 댓글 서비스를 적용해야한다.&lt;/p&gt;

&lt;p&gt;자주 사용되는 댓글 서비스 중에 Disqus라는 것이 있다.  본인도 한동안 Disqus를 사용해왔다. 그런데 Disqus 무료 라이센스를 사용하면 블로그에 광고가 과도하게 붙는다. 그리고 서비스도 무거운 편이다.&lt;/p&gt;

&lt;p&gt;본 포스트에서는 또다른 댓글 관리 서비스인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utterances&lt;/code&gt;를 jekyll 블로그에 설정하는 방법을 소개한다. github에 issue를 활용하여 댓글을 관리하는데 광고도 붙지않고 가벼워서 개인 블로그 운영에 적합하다.&lt;/p&gt;

&lt;h3 id=&quot;1-댓글-관리용-저장소-생성하기&quot;&gt;1. 댓글 관리용 저장소 생성하기&lt;/h3&gt;

&lt;p&gt;우선 개인 github 계정에 댓글들을 관리할 저장소를 생성한다. 본인의 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blog-comments&lt;/code&gt;라는 이름으로 생성하였다. public으로 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-utterances-app-설치-및-설정&quot;&gt;2. Utterances app 설치 및 설정&lt;/h3&gt;

&lt;p&gt;다음 경로로 들어가서 Inatall 버튼을 클릭하여 utterences app을 설치한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/apps/utterances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치할 저장소를 지정하는 부분이 표시되면, 앞에서 생성한 저장소 이름을 입력하면 된다.(여기서는 blog-comments) 그리고 Install 버튼을 클릭한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;계속해서 설정항목으로 이동한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt; 항목에서 저장소 정보를 설정한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;계정이름/저장소이름&lt;/code&gt; 형태로 입력하면 된다. 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sguys99/blog-comments&lt;/code&gt;로 입력하였다.&lt;/p&gt;

&lt;p&gt;바로 아래 포스트와 github 저장소 간 댓글을 매핑하는 방법을 설정하는 항목이 있다. 개인 선호에 따라 선택하면 된다. 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Issue title contains page pathname&lt;/code&gt;을 선택하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;선호하는 테마를 선택한다. 여기서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github Light&lt;/code&gt;를 선택하였다.&lt;/p&gt;

&lt;p&gt;모든 설정이 완료되면 맨아래에 설정을 반영한 script가 자동으로 생성된다. 이 부분을 복사해둔다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.05.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-jekyll-블로그에-설정-반영하기&quot;&gt;3. Jekyll 블로그에 설정 반영하기&lt;/h3&gt;

&lt;p&gt;이제 설정한 내용을 블로그에 소스에 반영한다. 본인은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jasper2&lt;/code&gt; 템플릿을 사용한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts/post.html&lt;/code&gt;  파일은 블로그의 포스트 구성을 정의한 파일이다. 이 파일에 앞에 복사한 내용을 추가해주면 된다.&lt;/p&gt;

&lt;p&gt;jasper2 의 경우 Disqus를 기본 댓글 서비스로 사용하도록 작성되어 있다. 이와 관련된 부분을 주석처리한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 이 부분에 앞에서 복사한 script를 붙여 넣어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.07.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-시험해보기&quot;&gt;4. 시험해보기&lt;/h3&gt;

&lt;p&gt;블로그 하단에 다음과 같은 댓글 항목이 나타나면 정상 동작하는 하는 것이다. 시험삼아 댓글을 입력해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.08.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력된 댓글들은 생성한 저장소의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Issues&lt;/code&gt; 항목에서 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-30-it04/it04.09.jpg&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">jekyll 블로그에서는 댓글 기능을 제공하지 않는다. 따라서 별도로 댓글 서비스를 적용해야한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git cheat sheet3</title>
      <link href="https://sguys99.github.io//it03" rel="alternate" type="text/html" title="git cheat sheet3" />
      <published>2021-12-25T15:00:00+00:00</published>
      <updated>2021-12-25T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it03</id>
      <content type="html" xml:base="https://sguys99.github.io//it03">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it01&quot;&gt;cheat sheet1 - 기본 명령어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it02&quot;&gt;cheat sheet2 - commit 조작&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it03&quot;&gt;cheat sheet3 - branch 조작&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git에 대한 자세한 내용은 &lt;a href=&quot;https://wikidocs.net/book/7060&quot;&gt;다음 책&lt;/a&gt;을 참고 바란다.&lt;/p&gt;

&lt;p&gt;본 절에서는 브랜치 작업과 관련된 명령어를 정리하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-25-it03/it03.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-setup&quot;&gt;1. Setup&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; : 브랜치 목록 표시&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch [브랜치명]&lt;/code&gt; : 해당 브랜치 명으로 브랜치 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [브랜치명]&lt;/code&gt; : 해당 브랜치로 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout –b [브랜치명]&lt;/code&gt; : 브랜치 생성과 동시에 전환&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -m [브랜치명] [새로운 브랜치명]&lt;/code&gt; : 브랜치명 변경&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch –d [브랜치명]&lt;/code&gt; : 해당 브랜치 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-merge-rewrite&quot;&gt;2. Merge, rewrite&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;2.1 merge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge [브랜치명]&lt;/code&gt; : 현 브랜치에 해당 브랜치의 내용 병합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-25-it03/it03.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --ff [브랜치명]&lt;/code&gt; : fast-forward 관계에 있으면 commit을 생성하지 않고 현재 브랜치의 참조 값 만 변경(default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-25-it03/it03.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --no-ff [브랜치명]&lt;/code&gt; : fast-forward 관계에 있어도 merged commit 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-25-it03/it03.04.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --squash [브랜치명]&lt;/code&gt; : fast-forward 관계에 있어도 merged commit 생성, merging 브랜치 정보 생략&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.2 rebase&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;assets/images/2021-12-25-it03/it03.05.jpg&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase [브랜치명]&lt;/code&gt; : 현재 브랜치가 해당 브랜치(브랜치명)에부터 분기하도록 재배치&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt; : 충돌 수정 후 재배치 진행(commit 대신)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --abort&lt;/code&gt; : rebase 취소&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2.3 cherry-pick&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;assets/images/2021-12-25-it03/it03.06.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick [commit hash]&lt;/code&gt; : 해당 commit의 내용을 현재 브랜치에 추가. 뒤에 commit hash 를 연속 입력하면 복수 추가 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick [commit hash start].. [commit hash end]&lt;/code&gt; : 해당 구간의 commit을 한번에 추가&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick –-abort&lt;/code&gt; :  충돌과 같은 상황이 발생했을 때 cherry-pick 취소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick –-continue&lt;/code&gt; : 충돌 상황 해결 후 cherry-pick 진행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick –m [parent number] [merge commit ID]&lt;/code&gt; : merge commit을 추가. merge commit의 경우 어떤 부분의 merge를 가져올지 알 수 없다. 그래서 parent number를 추가해야 한다.(1부터 시작하며 main line이 1)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. cheat sheet1 - 기본 명령어 cheat sheet2 - commit 조작 cheat sheet3 - branch 조작</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git cheat sheet2</title>
      <link href="https://sguys99.github.io//it02" rel="alternate" type="text/html" title="git cheat sheet2" />
      <published>2021-12-23T15:00:00+00:00</published>
      <updated>2021-12-23T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it02</id>
      <content type="html" xml:base="https://sguys99.github.io//it02">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it01&quot;&gt;cheat sheet1 - 기본 명령어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it02&quot;&gt;cheat sheet2 - commit 조작&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it03&quot;&gt;cheat sheet3 - branch 조작&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git에 대한 자세한 내용은 &lt;a href=&quot;https://wikidocs.net/book/7060&quot;&gt;다음 책&lt;/a&gt;을 참고 바란다.&lt;/p&gt;

&lt;p&gt;본 포스트에서는 commit 조작과 관련된 명령어를 정리하였다.&lt;/p&gt;

&lt;h3 id=&quot;1-checkout&quot;&gt;1. Checkout&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [commit hash]&lt;/code&gt; : 해당 commit으로 파일상태 변경&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -&lt;/code&gt; : HEAD가 이전에 참조했던 commit으로 상태변경&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt; : HEAD가 master를 참조&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HEAD~n&lt;/code&gt; : HEAD를 기준으로 n단계 이전 commit으로 상태변경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-undoing-checkout&quot;&gt;2. Undoing checkout&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-23-it02/it02.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset&lt;/code&gt; : Staging area의 파일 전체를 unstaged 상태로 되돌리기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset [파일명]&lt;/code&gt; : 해당 파일을 unstaged 상태로 되돌리기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-23-it02/it02.02.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; : 최근 커밋을 수정하기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend -m &quot;[commit 메시지]&quot;&lt;/code&gt; : 해당 메시지로 commit 수정하기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-23-it02/it02.03.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset [commit hash]&lt;/code&gt; : 해당 commit으로 브랜치의 참조를 변경&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset –-hard [commit hash]&lt;/code&gt; : working directory, staging area, commit 모두 reset&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset –-mixed [commit hash]&lt;/code&gt; : working directory 유지, staging area, commit reset , default option&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset –-soft [commit hash]&lt;/code&gt; : working directory, staging area 유지, commit reset&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset HEAD^&lt;/code&gt; : HEAD를 기준으로 직전의 commit으로 reset&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset HEAD~[정수]&lt;/code&gt; : HEAD를 기준으로 정수 값 단계 전 commit으로 reset&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. cheat sheet1 - 기본 명령어 cheat sheet2 - commit 조작 cheat sheet3 - branch 조작</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git cheat sheet1</title>
      <link href="https://sguys99.github.io//it01" rel="alternate" type="text/html" title="git cheat sheet1" />
      <published>2021-12-22T15:00:00+00:00</published>
      <updated>2021-12-22T15:00:00+00:00</updated>
      <id>https://sguys99.github.io//it01</id>
      <content type="html" xml:base="https://sguys99.github.io//it01">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;이 포스트는 여러 절로 구성되어 있습니다. &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;./it01&quot;&gt;cheat sheet1 - 기본 명령어&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it02&quot;&gt;cheat sheet2 - commit 조작&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./it03&quot;&gt;cheat sheet3 - branch 조작&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;git에 대한 자세한 내용은 &lt;a href=&quot;https://wikidocs.net/book/7060&quot;&gt;다음 책&lt;/a&gt;을 참고 바란다.&lt;/p&gt;

&lt;p&gt;본 포스트에서는 git 기본 명령어와 옵션 별 기능을 정리하였다.&lt;/p&gt;

&lt;h3 id=&quot;1-setup&quot;&gt;1. Setup&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; : 저장소(repository) 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone [원격 저장소 url]&lt;/code&gt; : 해당 주소의 내용을 복제하여 저장소 생성&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config user.name [작성자 이름]&lt;/code&gt; : 작성자 이름 설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config user.email [이메일 계정]&lt;/code&gt; : 작성자 이메일 설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --list&lt;/code&gt; : 저장소 설정 전체 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --get [설정항목]&lt;/code&gt; : 일부 설정항목만 출력(ex : git config –get user.name)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git help [커맨드 이름]&lt;/code&gt; : 도움말&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-stage--commit&quot;&gt;2. Stage &amp;amp; commit&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/2021-12-22-it01/it01.01.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add [파일이름]&lt;/code&gt; : 수정된 파일을 staging area 올리기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add [디렉토리 명]&lt;/code&gt; : 해당 디렉토리 내에 수정된 모든 파일들을 staging area에 올리기&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt; : working directory 내에 수정된 모든 파일들을 staging area에 올리기 (untracked 파일 제외)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; : 이력 저장(commit)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;[메시지]&quot;&lt;/code&gt; : vim을 사용하지 않고 인라인으로 메시지를 추가하여 commit&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -am &quot;[메시지]&quot;&lt;/code&gt; : add와 commit을 일괄적으로 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-inspect&quot;&gt;3. Inspect&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;git status&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; : 저장소 파일의 상태정보 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status -s&lt;/code&gt; : 파일 상태정보를 간략하게 표시&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;git log&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; : 저장소의 commit이력을 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=oneline&lt;/code&gt; : 각 commit을 한줄로 출력(–pretty 옵션 사용)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; : 각 commit을 한줄로 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --decorate=full&lt;/code&gt; : 브랜치나 태그정보를 상세히 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --graph&lt;/code&gt; : 그래프 형태로 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;git show&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show&lt;/code&gt; : 가장 최근의 commit 정보 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show [commit hash]&lt;/code&gt; : 해당 commit의 정보 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show HEAD&lt;/code&gt; : HEAD가 참조하는 commit의 정보 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show HEAD^^^&lt;/code&gt; : HEAD를 기준으로 3단계 이전의 commit정보 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git show HEAD~[n]&lt;/code&gt; : HEAD를 기준으로 n단계 이전의 commit정보 출력&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;git diff&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; : 최근 commit과 변경사항이 발생한(Unstaged) 파일들의 내용비교&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff --staged&lt;/code&gt; : 최근 commit과 Staging area의 파일들 간의 변경사항 출력&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff [commit hash1] [commit hash2]&lt;/code&gt; : 두 commit의 파일들 간의 변경사항 출력&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Kwang Myung Yu</name>
        
        
      </author>

      

      
        <category term="it-tips" />
      

      
        <summary type="html">이 포스트는 여러 절로 구성되어 있습니다. cheat sheet1 - 기본 명령어 cheat sheet2 - commit 조작 cheat sheet3 - branch 조작</summary>
      

      
      
    </entry>
  
</feed>
